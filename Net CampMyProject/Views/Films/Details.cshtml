@using Net_CampMyProject.Data.Models
@using Net_CampMyProject.Controllers
@using Microsoft.AspNetCore.Identity
@using Microsoft.CodeAnalysis.Differencing
@model Net_CampMyProject.Data.Models.Film

@inject UserManager<IdentityUser> _userManager;

@{
    ViewData["Title"] = "Details";
    var isAdmin = User.IsInRole(Roles.Admin);
    var userId = _userManager.GetUserId(User);

    var isAuthenticated = User.Identity?.IsAuthenticated == true;

    var likesCount = Model.MyRatings.Count(c => c.MyRating);
    var dislikesCount = Model.MyRatings.Count(c => !c.MyRating);
    var votesCount = Model.MyRatings.Count;

    var likesPercent = likesCount * 1.0 / votesCount * 100;
    var dislikesPercent = 100 - likesPercent;
}

@if (isAdmin)
{
    <div>
        @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
        <a asp-action="Index">Back to List</a>
    </div>
}

<div>
    <div class="w-75 m-1">
        <h4>@Model.Title</h4>
        <hr>
    </div>

    <dl class="row">
        @if (isAdmin)
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Id)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Id)
            </dd>
        }

        @if (!string.IsNullOrEmpty(Model.ImgUrl))
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.ImgUrl)
            </dt>

            <dd class="col-sm-10">
                <img src="@Model.ImgUrl" alt="@Model.Title" />
            </dd>
        }

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Genres)
        </dt>
        <dd class="col-sm-10">
            @foreach (var item in Model.Genres)
            {
                <span>@item.Genre.GenreType </span>
            }
        </dd>

        @if (!string.IsNullOrEmpty(Model.Duration))
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Duration)
            </dt>
            <dd class="col-sm-10">
                @Model.Duration
            </dd>
        }

        @if (!string.IsNullOrEmpty(Model.TrailerUrl))
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.TrailerUrl)
            </dt>
            <dd class="col-sm-10">
                <iframe width="560" height="315" src="@Model.TrailerUrl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </dd>
        }

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ReleaseDate)
        </dt>
        <dd class="col-sm-10">
            @Model.ReleaseDate.ToShortDateString()
        </dd>

        @if (!string.IsNullOrEmpty(Model.Budget))
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Budget)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Budget)
            </dd>
        }

        @if (!string.IsNullOrEmpty(Model.Languages))
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Languages)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Languages)
            </dd>
        }

        @if (!string.IsNullOrEmpty(Model.Awards))
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Awards)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Awards)
            </dd>
        }

        @if (!string.IsNullOrEmpty(Model.BoxOffice))
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.BoxOffice)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.BoxOffice)
            </dd>
        }

        @if (!string.IsNullOrEmpty(Model.Nominations))
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Nominations)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Nominations)
            </dd>
        }

        @if (Model.Persons.Any(c => c.Role == FilmPersonRole.Director))
        {
            <dt class="col-sm-2">
                Directors
            </dt>

            <dd class="col-sm-10">
                @foreach (var i in Model.Persons.Where(c => c.Role == FilmPersonRole.Director))
                {
                    <a asp-action="Details" asp-controller="Persons" asp-route-id="@i.Person.Id">@i.Person.Name</a>
                }
            </dd>
        }

        @if (Model.Persons.Any(c => c.Role == FilmPersonRole.Producer))
        {
            <dt class="col-sm-2">
                Producers
            </dt>
            <dd class="col-sm-10">
                @foreach (var i in Model.Persons.Where(c => c.Role == FilmPersonRole.Producer))
                {
                    <a asp-action="Details" asp-controller="Persons" asp-route-id="@i.Person.Id">@i.Person.Name</a>
                }
            </dd>
        }

        @if (Model.Persons.Any(c => c.Role == FilmPersonRole.ExecutiveProducers))
        {
            <dt class="col-sm-2">
                Executive producers
            </dt>
            <dd class="col-sm-10">
                @foreach (var i in Model.Persons.Where(c => c.Role == FilmPersonRole.ExecutiveProducers))
                {
                    <a asp-action="Details" asp-controller="Persons" asp-route-id="@i.Person.Id">@i.Person.Name</a>
                }
            </dd>
        }

        @if (Model.Persons.Any(c => c.Role == FilmPersonRole.Composer))
        {
            <dt class="col-sm-2">
                Composers
            </dt>
            <dd class="col-sm-10">
                @foreach (var i in Model.Persons.Where(c => c.Role == FilmPersonRole.Composer))
                {
                    <a asp-action="Details" asp-controller="Persons" asp-route-id="@i.Person.Id">@i.Person.Name</a>
                }
            </dd>
        }

        @if (Model.Persons.Any(c => c.Role == FilmPersonRole.Screenplay))
        {
            <dt class="col-sm-2">
                Screenplays
            </dt>
            <dd class="col-sm-10">
                @foreach (var i in Model.Persons.Where(c => c.Role == FilmPersonRole.Screenplay))
                {
                    <a asp-action="Details" asp-controller="Persons" asp-route-id="@i.Person.Id">@i.Person.Name</a>
                }
            </dd>
        }

        @if (Model.Persons.Any(c => c.Role == FilmPersonRole.StoryBy))
        {
            <dt class="col-sm-2">
                Story by
            </dt>
            <dd class="col-sm-10">
                @foreach (var i in Model.Persons.Where(c => c.Role == FilmPersonRole.StoryBy))
                {
                    <a asp-action="Details" asp-controller="Persons" asp-route-id="@i.Person.Id">@i.Person.Name</a>
                }
            </dd>
        }

        @if (Model.Persons.FirstOrDefault(c => c.Role == FilmPersonRole.Cast) != null)
        {
            <dt class="col-sm-2">
                Cast
            </dt>
            <dd class="col-sm-10">
                @foreach (var i in Model.Persons.Where(c => c.Role == FilmPersonRole.Cast))
                {
                    <a asp-action="Details" asp-controller="Persons" asp-route-id="@i.Person.Id">@i.Person.Name</a>
                }
            </dd>
        }

        @if (Model.Ratings.Any())
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Ratings)
            </dt>
            <dd class="col-sm-10">
                @foreach (var source in Model.Ratings)
                {
                    <div>
                        <a href="@source.Source.ResourceWebsite">@source.Rating.Trim().Split(" ").FirstOrDefault().Trim()</a>
                    </div>
                }
            </dd>
        }

        @if (!string.IsNullOrEmpty(Model.Story))
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Story)
            </dt>
            <dd class="col-sm-10">
                @Model.Story
            </dd>
        }

    </dl>

    <h4>Likes / dislikes:</h4>
    <div class="row">
        <div class="col-md-4">
            <form asp-action="CreateOrUpdate" asp-controller="MyFilmRatings">

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <input hidden="hidden" name="@nameof(MyFilmRating.FilmId)" value="@Model.Id" class="form-control" />

                <div class="form-group form-check">
                    <div class="form-group">

                        @{
                            var disabledStr = isAuthenticated ? "" : "disabled";
                        }

                        <button @disabledStr class="btn btn-success btn-lg" name="@nameof(MyFilmRating.MyRating)" value="true" title="Likes">@likesCount</button> :
                        <button @disabledStr class="btn btn-danger btn-lg" name="@nameof(MyFilmRating.MyRating)" value="false" title="Dislikes">@dislikesCount</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @if (!double.IsNaN(likesPercent))
    {
        <div class="progress bg-danger">
            <div class="progress-bar bg-success" role="progressbar" style="width:@likesPercent%" aria-valuenow="@likesPercent" aria-valuemin="0" aria-valuemax="100">@Math.Round(likesPercent, 1)%</div>
            <div class="progress-bar bg-danger" role="progressbar" style="width:@dislikesPercent%">@Math.Round(dislikesPercent, 1)%</div>
        </div>
    }

    @if (isAuthenticated)
    {
        <div class="form-group my-3">

            <h4>Add comment:</h4>

            <form asp-action="AddComment"
                  asp-controller="Films"
                  data-ajax="true"
                  data-ajax-method="POST"
                  data-ajax-mode="replace"
                  data-ajax-update="#votesDiv"
                  data-ajax-complete="onAddVoteComplete">

                @Html.AntiForgeryToken()
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <input hidden="hidden" name="@nameof(Comment.FilmId)" value="@Model.Id" class="form-control" />

                <div class="form-group">
                    <textarea class="form-control" name="@nameof(Comment.Content)" rows="3" placeholder="Write your comment"></textarea>
                </div>

                <div class="form-group text-right">
                    <input type="submit" value="Add comment" class="btn btn-primary" />
                </div>

            </form>
        </div>
    }
    else
    {
        <h4 class="my-5 text-danger">Add comment form is not available. <a asp-area="Identity" asp-page="/Account/Login">Authorize</a> first!</h4>
    }

    <div id="votesDiv">
        @await Html.PartialAsync("_VotesList", Model.Comments)
    </div>

</div>

@section Scripts  {

    @await Html.PartialAsync("_ValidationScriptsPartial")
    
    <script>
        function onAddVoteComplete() {
            $("textarea[name='Content']").val('');
        };
    </script>
}